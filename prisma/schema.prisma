generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(cuid())
  name                 String?
  email                String    @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  resetToken           String?   @unique
  resetTokenExpiry     DateTime?
  verificationToken    String?   @unique
  isPremium            Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  phone                String?
  passwordResetToken   String?   @map("password_reset_token")
  passwordResetExpires DateTime? @map("password_reset_expires")
  accounts             Account[]
  sessions             Session[]
  purchases            Purchase[]
  userCoupons          UserCoupon[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  guruProductId String?  @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  pages       Page[]
  accessDurationDays Int       @default(365) 
  purchases          Purchase[]
}

model Page {
  id          String    @id @default(cuid())
  title       String
  content     String?
  slug        String    @unique
  isExclusive Boolean   @default(true)
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  daysSincePurchase Int?   // Days after purchase when this lesson becomes available
}

model Purchase {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  product        Product  @relation(fields: [productId], references: [id])
  productId      String
  purchaseDate   DateTime @default(now())
  expirationDate DateTime
  status         String   @default("PENDING")
  startDate      DateTime?
  endDate        DateTime?

  @@unique([userId, productId])
}

model FormularioLiberacao {
  id             String   @id @default(cuid())
  name           String
  purchaseEmail  String
  whatsapp       String
  accountNumber  String
  customField    String?  // Novo campo opcional
  liberado       Boolean  @default(false)  // Indica se o acesso foi liberado
  createdAt      DateTime @default(now())
}

model ReferralCoupon {
  id                 String   @id @default(cuid())
  name               String
  purchaseEmail      String
  whatsapp           String
  divulgacao         String   // Como fará a divulgação
  desiredCouponName  String   // Nome do Cupom Desejado
  createdAt          DateTime @default(now())

  @@index([purchaseEmail])
}

model ReferralBonusRequest {
  id            String   @id @default(cuid())
  name          String
  purchaseEmail String
  whatsapp      String
  friendsCount  Int
  createdAt     DateTime @default(now())

  @@index([purchaseEmail])
}

model UserCoupon {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  coupon    String   @unique
  isActive  Boolean  @default(false)
  link      String
  createdAt DateTime @default(now())

  @@index([userId])
}
